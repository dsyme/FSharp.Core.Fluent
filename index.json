[{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent.html","title":"FSharp.Core.Fluent","content":"Array2DExtensions \nArray3DExtensions \nArray4DExtensions \nArrayExtensions \nEventExtensions \nListExtensions \nNativePtrExtensions \nNullableExtensions \nObservableExtensions \nOptionExtensions \nSeqExtensions \nStringExtensions \nArrayExtensionsConstrained \nListExtensionsConstrained \nOptionExtensionsConstrained"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array2dextensions.html","title":"Array2DExtensions","content":"Array2DExtensions \nFluent extension operations on 2D arrays. \nArray2DExtensions.base1 \nbase1 \nArray2DExtensions.base1 \nbase1 \nArray2DExtensions.base2 \nbase2 \nArray2DExtensions.base2 \nbase2 \nArray2DExtensions.length1 \nlength1 \nArray2DExtensions.length1 \nlength1 \nArray2DExtensions.length2 \nlength2 \nArray2DExtensions.length2 \nlength2 \nArray2DExtensions.rebase \nrebase \nArray2DExtensions.map \nmap \nArray2DExtensions.mapi \nmapi \nArray2DExtensions.iter \niter \nArray2DExtensions.iteri \niteri \nArray2DExtensions.copy \ncopy"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array2dextensions.html#base1","title":"Array2DExtensions.base1","content":"Array2DExtensions.base1 \nbase1 \nFetches the base-index for the first dimension of the array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array2dextensions.html#base1","title":"Array2DExtensions.base1","content":"Array2DExtensions.base1 \nbase1 \nFetches the base-index for the first dimension of the array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array2dextensions.html#base2","title":"Array2DExtensions.base2","content":"Array2DExtensions.base2 \nbase2 \nFetches the base-index for the second dimension of the array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array2dextensions.html#base2","title":"Array2DExtensions.base2","content":"Array2DExtensions.base2 \nbase2 \nFetches the base-index for the second dimension of the array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array2dextensions.html#length1","title":"Array2DExtensions.length1","content":"Array2DExtensions.length1 \nlength1 \nReturns the length of an array in the first dimension."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array2dextensions.html#length1","title":"Array2DExtensions.length1","content":"Array2DExtensions.length1 \nlength1 \nReturns the length of an array in the first dimension."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array2dextensions.html#length2","title":"Array2DExtensions.length2","content":"Array2DExtensions.length2 \nlength2 \nReturns the length of an array in the second dimension."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array2dextensions.html#length2","title":"Array2DExtensions.length2","content":"Array2DExtensions.length2 \nlength2 \nReturns the length of an array in the second dimension."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array2dextensions.html#rebase","title":"Array2DExtensions.rebase","content":"Array2DExtensions.rebase \nrebase \nBuilds a new array whose elements are the same as the input array but\n where a non-zero-based input array generates a corresponding zero-based \n output array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array2dextensions.html#map","title":"Array2DExtensions.map","content":"Array2DExtensions.map \nmap \nBuilds a new array whose elements are the results of applying the given function\n to each of the elements of the array. \nFor non-zero-based arrays the basing on an input array will be propogated to the output\n array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array2dextensions.html#mapi","title":"Array2DExtensions.mapi","content":"Array2DExtensions.mapi \nmapi \nBuilds a new array whose elements are the results of applying the given function\n to each of the elements of the array. The integer indices passed to the\n function indicates the element being transformed. \nFor non-zero-based arrays the basing on an input array will be propagated to the output\n array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array2dextensions.html#iter","title":"Array2DExtensions.iter","content":"Array2DExtensions.iter \niter \nApplies the given function to each element of the array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array2dextensions.html#iteri","title":"Array2DExtensions.iteri","content":"Array2DExtensions.iteri \niteri \nApplies the given function to each element of the array.  The integer indices passed to the\n function indicates the index of element."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array2dextensions.html#copy","title":"Array2DExtensions.copy","content":"Array2DExtensions.copy \ncopy \nBuilds a new array whose elements are the same as the input array. \nFor non-zero-based arrays the basing on an input array will be propogated to the output\n array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array3dextensions.html","title":"Array3DExtensions","content":"Array3DExtensions \nFluent extension operations on 3D arrays. \nArray3DExtensions.iter \niter \nArray3DExtensions.iteri \niteri \nArray3DExtensions.length1 \nlength1 \nArray3DExtensions.length1 \nlength1 \nArray3DExtensions.length2 \nlength2 \nArray3DExtensions.length2 \nlength2 \nArray3DExtensions.length3 \nlength3 \nArray3DExtensions.length3 \nlength3 \nArray3DExtensions.map \nmap \nArray3DExtensions.mapi \nmapi"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array3dextensions.html#iter","title":"Array3DExtensions.iter","content":"Array3DExtensions.iter \niter \nApplies the given function to each element of the array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array3dextensions.html#iteri","title":"Array3DExtensions.iteri","content":"Array3DExtensions.iteri \niteri \nApplies the given function to each element of the array. The integer indicies passed to the\n function indicates the index of element."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array3dextensions.html#length1","title":"Array3DExtensions.length1","content":"Array3DExtensions.length1 \nlength1 \nReturns the length of an array in the first dimension  "},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array3dextensions.html#length1","title":"Array3DExtensions.length1","content":"Array3DExtensions.length1 \nlength1 \nReturns the length of an array in the first dimension  "},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array3dextensions.html#length2","title":"Array3DExtensions.length2","content":"Array3DExtensions.length2 \nlength2 \nReturns the length of an array in the second dimension."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array3dextensions.html#length2","title":"Array3DExtensions.length2","content":"Array3DExtensions.length2 \nlength2 \nReturns the length of an array in the second dimension."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array3dextensions.html#length3","title":"Array3DExtensions.length3","content":"Array3DExtensions.length3 \nlength3 \nReturns the length of an array in the third dimension."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array3dextensions.html#length3","title":"Array3DExtensions.length3","content":"Array3DExtensions.length3 \nlength3 \nReturns the length of an array in the third dimension."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array3dextensions.html#map","title":"Array3DExtensions.map","content":"Array3DExtensions.map \nmap \nBuilds a new array whose elements are the results of applying the given function\n to each of the elements of the array. \nFor non-zero-based arrays the basing on an input array will be propogated to the output\n array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array3dextensions.html#mapi","title":"Array3DExtensions.mapi","content":"Array3DExtensions.mapi \nmapi \nBuilds a new array whose elements are the results of applying the given function\n to each of the elements of the array. The integer indices passed to the\n function indicates the element being transformed. \nFor non-zero-based arrays the basing on an input array will be propogated to the output\n array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array4dextensions.html","title":"Array4DExtensions","content":"Array4DExtensions \nFluent extension operations on 4D arrays. \nArray4DExtensions.length1 \nlength1 \nArray4DExtensions.length1 \nlength1 \nArray4DExtensions.length2 \nlength2 \nArray4DExtensions.length2 \nlength2 \nArray4DExtensions.length3 \nlength3 \nArray4DExtensions.length3 \nlength3 \nArray4DExtensions.length4 \nlength4 \nArray4DExtensions.length4 \nlength4"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array4dextensions.html#length1","title":"Array4DExtensions.length1","content":"Array4DExtensions.length1 \nlength1 \nReturns the length of an array in the first dimension  "},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array4dextensions.html#length1","title":"Array4DExtensions.length1","content":"Array4DExtensions.length1 \nlength1 \nReturns the length of an array in the first dimension  "},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array4dextensions.html#length2","title":"Array4DExtensions.length2","content":"Array4DExtensions.length2 \nlength2 \nReturns the length of an array in the second dimension."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array4dextensions.html#length2","title":"Array4DExtensions.length2","content":"Array4DExtensions.length2 \nlength2 \nReturns the length of an array in the second dimension."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array4dextensions.html#length3","title":"Array4DExtensions.length3","content":"Array4DExtensions.length3 \nlength3 \nReturns the length of an array in the third dimension."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array4dextensions.html#length3","title":"Array4DExtensions.length3","content":"Array4DExtensions.length3 \nlength3 \nReturns the length of an array in the third dimension."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array4dextensions.html#length4","title":"Array4DExtensions.length4","content":"Array4DExtensions.length4 \nlength4 \nReturns the length of an array in the fourth dimension."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-array4dextensions.html#length4","title":"Array4DExtensions.length4","content":"Array4DExtensions.length4 \nlength4 \nReturns the length of an array in the fourth dimension."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html","title":"ArrayExtensions","content":"ArrayExtensions \nFluent extension operations on arrays. \nArrayExtensions.append \nappend \nArrayExtensions.collect \ncollect \nArrayExtensions.copy \ncopy \nArrayExtensions.tryPick \ntryPick \nArrayExtensions.pick \npick \nArrayExtensions.choose \nchoose \nArrayExtensions.countBy \ncountBy \nArrayExtensions.distinctBy \ndistinctBy \nArrayExtensions.groupBy \ngroupBy \nArrayExtensions.pairwise \npairwise \nArrayExtensions.skip \nskip \nArrayExtensions.skipWhile \nskipWhile \nArrayExtensions.take \ntake \nArrayExtensions.takeWhile \ntakeWhile \nArrayExtensions.truncate \ntruncate \nArrayExtensions.where \nwhere \nArrayExtensions.windowed \nwindowed \nArrayExtensions.indexed \nindexed \nArrayExtensions.exists \nexists \nArrayExtensions.filter \nfilter \nArrayExtensions.find \nfind \nArrayExtensions.findIndex \nfindIndex \nArrayExtensions.forall \nforall \nArrayExtensions.fold \nfold \nArrayExtensions.foldBack \nfoldBack \nArrayExtensions.IsEmpty \nIsEmpty \nArrayExtensions.IsEmpty \nIsEmpty \nArrayExtensions.iter \niter \nArrayExtensions.iteri \niteri \nArrayExtensions.length \nlength \nArrayExtensions.length \nlength \nArrayExtensions.map \nmap \nArrayExtensions.mapi \nmapi \nArrayExtensions.partition \npartition \nArrayExtensions.permute \npermute \nArrayExtensions.reduce \nreduce \nArrayExtensions.reduceBack \nreduceBack \nArrayExtensions.reverse \nreverse \nArrayExtensions.scan \nscan \nArrayExtensions.scanBack \nscanBack \nArrayExtensions.sortBy \nsortBy \nArrayExtensions.sortWith \nsortWith \nArrayExtensions.sortInPlaceBy \nsortInPlaceBy \nArrayExtensions.sortInPlaceWith \nsortInPlaceWith \nArrayExtensions.toList \ntoList \nArrayExtensions.toSeq \ntoSeq \nArrayExtensions.tryFind \ntryFind \nArrayExtensions.tryFindIndex \ntryFindIndex \nArrayExtensions.zip \nzip \nArrayExtensions.zip3 \nzip3 \nArrayExtensions.exactlyOne \nexactlyOne \nArrayExtensions.sortByDescending \nsortByDescending \nArrayExtensions.tryFindIndexBack \ntryFindIndexBack \nArrayExtensions.tryFindBack \ntryFindBack \nArrayExtensions.tryItem \ntryItem \nArrayExtensions.tail \ntail \nArrayExtensions.head \nhead \nArrayExtensions.last \nlast \nArrayExtensions.tryLast \ntryLast \nArrayExtensions.tryHead \ntryHead"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#append","title":"ArrayExtensions.append","content":"ArrayExtensions.append \nappend \nBuilds a new array that contains the elements of the first array followed by the elements of the second array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#collect","title":"ArrayExtensions.collect","content":"ArrayExtensions.collect \ncollect \nFor each element of the array, applies the given function. Concatenates all the results and return the combined array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#copy","title":"ArrayExtensions.copy","content":"ArrayExtensions.copy \ncopy \nBuilds a new array that contains the elements of the given array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#tryPick","title":"ArrayExtensions.tryPick","content":"ArrayExtensions.tryPick \ntryPick \nApplies the given function to successive elements, returning the first\n result where function returns <code>Some(x)</code> for some <code>x</code>. If the function \n never returns <code>Some(x)</code> then <code>None</code> is returned."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#pick","title":"ArrayExtensions.pick","content":"ArrayExtensions.pick \npick \nApplies the given function to successive elements, returning the first\n result where function returns <code>Some(x)</code> for some <code>x</code>. If the function \n never returns <code>Some(x)</code> then <code>KeyNotFoundException</code> is raised."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#choose","title":"ArrayExtensions.choose","content":"ArrayExtensions.choose \nchoose \nApplies the given function to each element of the array. Returns\n the array comprised of the results \"x\" for each element where\n the function returns Some(x)"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#countBy","title":"ArrayExtensions.countBy","content":"ArrayExtensions.countBy \ncountBy \nApplies a key-generating function to each element of an array and returns an array yielding unique\n keys and their number of occurrences in the original array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#distinctBy","title":"ArrayExtensions.distinctBy","content":"ArrayExtensions.distinctBy \ndistinctBy \nReturns an array that contains no duplicate entries according to the \n generic hash and equality comparisons on the keys returned by the given key-generating function.\n If an element occurs multiple times in the array then the later occurrences are discarded."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#groupBy","title":"ArrayExtensions.groupBy","content":"ArrayExtensions.groupBy \ngroupBy \nApplies a key-generating function to each element of an array and yields an array of \n unique keys. Each unique key contains an array of all elements that match \n to this key."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#pairwise","title":"ArrayExtensions.pairwise","content":"ArrayExtensions.pairwise \npairwise \nReturns an array of each element in the input array and its predecessor, with the\n exception of the first element which is only returned as the predecessor of the second element."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#skip","title":"ArrayExtensions.skip","content":"ArrayExtensions.skip \nskip \nBuilds a new array that contains the elements of the given array, excluding the first N elements."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#skipWhile","title":"ArrayExtensions.skipWhile","content":"ArrayExtensions.skipWhile \nskipWhile \nBypasses elements in an array while the given predicate returns <code>true</code>, and then returns\n the remaining elements in a new array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#take","title":"ArrayExtensions.take","content":"ArrayExtensions.take \ntake \nReturns the first N elements of the array. \nThrows <code>InvalidOperationException</code>\n if the count exceeds the number of elements in the array. <code>Array.truncate</code>\n returns as many items as the array contains instead of throwing an exception."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#takeWhile","title":"ArrayExtensions.takeWhile","content":"ArrayExtensions.takeWhile \ntakeWhile \nReturns an array that contains all elements of the original array while the \n given predicate returns <code>true</code>, and then returns no further elements."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#truncate","title":"ArrayExtensions.truncate","content":"ArrayExtensions.truncate \ntruncate \nReturns at most N elements in a new array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#where","title":"ArrayExtensions.where","content":"ArrayExtensions.where \nwhere \nReturns a new array containing only the elements of the array\n for which the given predicate returns \"true\"."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#windowed","title":"ArrayExtensions.windowed","content":"ArrayExtensions.windowed \nwindowed \nReturns an array of sliding windows containing elements drawn from the input\n array. Each window is returned as a fresh array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#indexed","title":"ArrayExtensions.indexed","content":"ArrayExtensions.indexed \nindexed \nBuilds a new array whose elements are the corresponding elements of the input array\n paired with the integer index (from 0) of each element."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#exists","title":"ArrayExtensions.exists","content":"ArrayExtensions.exists \nexists \nTests if any element of the array satisfies the given predicate. \nThe predicate is applied to the elements of the input array. If any application \n returns true then the overall result is true and no further elements are tested. \n Otherwise, false is returned."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#filter","title":"ArrayExtensions.filter","content":"ArrayExtensions.filter \nfilter \nReturns a new collection containing only the elements of the collection\n for which the given predicate returns \"true\"."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#find","title":"ArrayExtensions.find","content":"ArrayExtensions.find \nfind \nReturns the first element for which the given function returns 'true'.\n Raise <code>KeyNotFoundException</code> if no such element exists."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#findIndex","title":"ArrayExtensions.findIndex","content":"ArrayExtensions.findIndex \nfindIndex \nReturns the index of the first element in the array\n that satisfies the given predicate. Raise <code>KeyNotFoundException</code> if \n none of the elements satisy the predicate."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#forall","title":"ArrayExtensions.forall","content":"ArrayExtensions.forall \nforall \nTests if all elements of the array satisfy the given predicate. \nThe predicate is applied to the elements of the input collection. If any application \n returns false then the overall result is false and no further elements are tested. \n Otherwise, true is returned."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#fold","title":"ArrayExtensions.fold","content":"ArrayExtensions.fold \nfold \nApplies a function to each element of the collection, threading an accumulator argument\n through the computation. If the input function is <code>f</code> and the elements are <code>i0...iN</code> then computes \n <code>f (... (f s i0)...) iN</code>"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#foldBack","title":"ArrayExtensions.foldBack","content":"ArrayExtensions.foldBack \nfoldBack \nApplies a function to each element of the array, threading an accumulator argument\n through the computation. If the input function is <code>f</code> and the elements are <code>i0...iN</code> then computes \n <code>f i0 (...(f iN s))</code>"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#IsEmpty","title":"ArrayExtensions.IsEmpty","content":"ArrayExtensions.IsEmpty \nIsEmpty \nReturns true if the given array is empty, otherwise false."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#IsEmpty","title":"ArrayExtensions.IsEmpty","content":"ArrayExtensions.IsEmpty \nIsEmpty \nReturns true if the given array is empty, otherwise false."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#iter","title":"ArrayExtensions.iter","content":"ArrayExtensions.iter \niter \nApplies the given function to each element of the array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#iteri","title":"ArrayExtensions.iteri","content":"ArrayExtensions.iteri \niteri \nApplies the given function to each element of the array. The integer passed to the\n function indicates the index of element."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#length","title":"ArrayExtensions.length","content":"ArrayExtensions.length \nlength \nReturns the length of an array. You can also use property arr.Length."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#length","title":"ArrayExtensions.length","content":"ArrayExtensions.length \nlength \nReturns the length of an array. You can also use property arr.Length."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#map","title":"ArrayExtensions.map","content":"ArrayExtensions.map \nmap \nBuilds a new array whose elements are the results of applying the given function\n to each of the elements of the array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#mapi","title":"ArrayExtensions.mapi","content":"ArrayExtensions.mapi \nmapi \nBuilds a new array whose elements are the results of applying the given function\n to each of the elements of the array. The integer index passed to the\n function indicates the index of element being transformed."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#partition","title":"ArrayExtensions.partition","content":"ArrayExtensions.partition \npartition \nSplits the collection into two collections, containing the \n elements for which the given predicate returns \"true\" and \"false\"\n respectively."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#permute","title":"ArrayExtensions.permute","content":"ArrayExtensions.permute \npermute \nReturns an array with all elements permuted according to the\n specified permutation."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#reduce","title":"ArrayExtensions.reduce","content":"ArrayExtensions.reduce \nreduce \nApplies a function to each element of the array, threading an accumulator argument\n through the computation. If the input function is <code>f</code> and the elements are <code>i0...iN</code> \n then computes <code>f (... (f i0 i1)...) iN</code>.\n Raises ArgumentException if the array has size zero."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#reduceBack","title":"ArrayExtensions.reduceBack","content":"ArrayExtensions.reduceBack \nreduceBack \nApplies a function to each element of the array, threading an accumulator argument\n through the computation. If the input function is <code>f</code> and the elements are <code>i0...iN</code> \n then computes <code>f i0 (...(f iN-1 iN))</code>.\n Raises ArgumentException if the array has size zero."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#reverse","title":"ArrayExtensions.reverse","content":"ArrayExtensions.reverse \nreverse \nReturns a new array with the elements in reverse order."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#scan","title":"ArrayExtensions.scan","content":"ArrayExtensions.scan \nscan \nLike <code>fold</code>, but return the intermediary and final results."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#scanBack","title":"ArrayExtensions.scanBack","content":"ArrayExtensions.scanBack \nscanBack \nLike <code>foldBack</code>, but return both the intermediary and final results."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#sortBy","title":"ArrayExtensions.sortBy","content":"ArrayExtensions.sortBy \nsortBy \nSorts the elements of an array, using the given projection for the keys and returning a new array. \n Elements are compared using Operators.compare. \nThis is not a stable sort, i.e. the original order of equal elements is not necessarily preserved. \n For a stable sort, consider using Seq.sort."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#sortWith","title":"ArrayExtensions.sortWith","content":"ArrayExtensions.sortWith \nsortWith \nSorts the elements of an array, using the given comparison function as the order, returning a new array. \nThis is not a stable sort, i.e. the original order of equal elements is not necessarily preserved. \n For a stable sort, consider using Seq.sort."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#sortInPlaceBy","title":"ArrayExtensions.sortInPlaceBy","content":"ArrayExtensions.sortInPlaceBy \nsortInPlaceBy \nSorts the elements of an array by mutating the array in-place, using the given projection for the keys. \n Elements are compared using Operators.compare. \nThis is not a stable sort, i.e. the original order of equal elements is not necessarily preserved. \n For a stable sort, consider using Seq.sort."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#sortInPlaceWith","title":"ArrayExtensions.sortInPlaceWith","content":"ArrayExtensions.sortInPlaceWith \nsortInPlaceWith \nSorts the elements of an array by mutating the array in-place, using the given comparison function as the order."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#toList","title":"ArrayExtensions.toList","content":"ArrayExtensions.toList \ntoList \nBuilds a list from the given array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#toSeq","title":"ArrayExtensions.toSeq","content":"ArrayExtensions.toSeq \ntoSeq \nViews the given array as a sequence."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#tryFind","title":"ArrayExtensions.tryFind","content":"ArrayExtensions.tryFind \ntryFind \nReturns the first element for which the given function returns <code>true</code>.\n Return <code>None</code> if no such element exists."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#tryFindIndex","title":"ArrayExtensions.tryFindIndex","content":"ArrayExtensions.tryFindIndex \ntryFindIndex \nReturns the index of the first element in the array\n that satisfies the given predicate."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#zip","title":"ArrayExtensions.zip","content":"ArrayExtensions.zip \nzip \nCombines the two arrays into an array of pairs. The two arrays must have equal lengths, otherwise an <code>ArgumentException</code> is\n raised."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#zip3","title":"ArrayExtensions.zip3","content":"ArrayExtensions.zip3 \nzip3 \nCombines three arrays into an list of pairs. The three arrays must have equal lengths, otherwise an <code>ArgumentException</code> is\n raised."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#exactlyOne","title":"ArrayExtensions.exactlyOne","content":"ArrayExtensions.exactlyOne \nexactlyOne \nReturns the only element of the array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#sortByDescending","title":"ArrayExtensions.sortByDescending","content":"ArrayExtensions.sortByDescending \nsortByDescending \nSorts the elements of an array, in descending order, using the given projection for the keys and returning a new array. \n Elements are compared using Operators.compare. \nThis is not a stable sort, i.e. the original order of equal elements is not necessarily preserved. \n For a stable sort, consider using Seq.sort."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#tryFindIndexBack","title":"ArrayExtensions.tryFindIndexBack","content":"ArrayExtensions.tryFindIndexBack \ntryFindIndexBack \nReturns the index of the last element in the array\n that satisfies the given predicate."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#tryFindBack","title":"ArrayExtensions.tryFindBack","content":"ArrayExtensions.tryFindBack \ntryFindBack \nReturns the last element for which the given function returns <code>true</code>.\n Return <code>None</code> if no such element exists."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#tryItem","title":"ArrayExtensions.tryItem","content":"ArrayExtensions.tryItem \ntryItem \nTries to find the nth element in the array.\n Returns <code>None</code> if index is negative or the input array does not contain enough elements."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#tail","title":"ArrayExtensions.tail","content":"ArrayExtensions.tail \ntail \nReturns a new array containing the elements of the original except the first element."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#head","title":"ArrayExtensions.head","content":"ArrayExtensions.head \nhead \nReturns the first element of the array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#last","title":"ArrayExtensions.last","content":"ArrayExtensions.last \nlast \nReturns the last element of the array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#tryLast","title":"ArrayExtensions.tryLast","content":"ArrayExtensions.tryLast \ntryLast \nReturns the last element of the array.\n Return <code>None</code> if no such element exists."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensions.html#tryHead","title":"ArrayExtensions.tryHead","content":"ArrayExtensions.tryHead \ntryHead \nReturns the first element of the array, or\n <code>None</code> if the array is empty."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-eventextensions.html","title":"EventExtensions","content":"EventExtensions \nFluent extension operations on events. \nEventExtensions.merge \nmerge \nEventExtensions.map \nmap \nEventExtensions.filter \nfilter \nEventExtensions.partition \npartition \nEventExtensions.split \nsplit \nEventExtensions.choose \nchoose \nEventExtensions.scan \nscan \nEventExtensions.add \nadd \nEventExtensions.pairwise \npairwise"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-eventextensions.html#merge","title":"EventExtensions.merge","content":"EventExtensions.merge \nmerge \nFires the output event when either of the input events fire."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-eventextensions.html#map","title":"EventExtensions.map","content":"EventExtensions.map \nmap \nReturns a new event that passes values transformed by the given function."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-eventextensions.html#filter","title":"EventExtensions.filter","content":"EventExtensions.filter \nfilter \nReturns a new event that listens to the original event and triggers the resulting\n event only when the argument to the event passes the given function."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-eventextensions.html#partition","title":"EventExtensions.partition","content":"EventExtensions.partition \npartition \nReturns a new event that listens to the original event and triggers the \n first resulting event if the application of the predicate to the event arguments\n returned true, and the second event if it returned false."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-eventextensions.html#split","title":"EventExtensions.split","content":"EventExtensions.split \nsplit \nReturns a new event that listens to the original event and triggers the \n first resulting event if the application of the function to the event arguments\n returned a Choice1Of2, and the second event if it returns a Choice2Of2."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-eventextensions.html#choose","title":"EventExtensions.choose","content":"EventExtensions.choose \nchoose \nReturns a new event which fires on a selection of messages from the original event.\n The selection function takes an original message to an optional new message."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-eventextensions.html#scan","title":"EventExtensions.scan","content":"EventExtensions.scan \nscan \nReturns a new event consisting of the results of applying the given accumulating function\n to successive values triggered on the input event.  An item of internal state\n records the current value of the state parameter.  The internal state is not locked during the\n execution of the accumulation function, so care should be taken that the \n input IEvent not triggered by multiple threads simultaneously."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-eventextensions.html#add","title":"EventExtensions.add","content":"EventExtensions.add \nadd \nRuns the given function each time the given event is triggered."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-eventextensions.html#pairwise","title":"EventExtensions.pairwise","content":"EventExtensions.pairwise \npairwise \nReturns a new event that triggers on the second and subsequent triggerings of the input event.\n The Nth triggering of the input event passes the arguments from the N-1th and Nth triggering as\n a pair. The argument passed to the N-1th triggering is held in hidden internal state until the \n Nth triggering occurs."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html","title":"ListExtensions","content":"ListExtensions \nFluent extension operations on lists. \nListExtensions.append \nappend \nListExtensions.collect \ncollect \nListExtensions.concat \nconcat \nListExtensions.tryPick \ntryPick \nListExtensions.pick \npick \nListExtensions.choose \nchoose \nListExtensions.exists \nexists \nListExtensions.filter \nfilter \nListExtensions.find \nfind \nListExtensions.findIndex \nfindIndex \nListExtensions.forall \nforall \nListExtensions.fold \nfold \nListExtensions.foldBack \nfoldBack \nListExtensions.iter \niter \nListExtensions.iteri \niteri \nListExtensions.length \nlength \nListExtensions.length \nlength \nListExtensions.map \nmap \nListExtensions.mapi \nmapi \nListExtensions.partition \npartition \nListExtensions.permute \npermute \nListExtensions.reduce \nreduce \nListExtensions.reduceBack \nreduceBack \nListExtensions.reverse \nreverse \nListExtensions.scan \nscan \nListExtensions.scanBack \nscanBack \nListExtensions.sortBy \nsortBy \nListExtensions.sortWith \nsortWith \nListExtensions.toSeq \ntoSeq \nListExtensions.tryFind \ntryFind \nListExtensions.tryFindIndex \ntryFindIndex \nListExtensions.zip \nzip \nListExtensions.zip3 \nzip3 \nListExtensions.countBy \ncountBy \nListExtensions.distinctBy \ndistinctBy \nListExtensions.groupBy \ngroupBy \nListExtensions.pairwise \npairwise \nListExtensions.skip \nskip \nListExtensions.skipWhile \nskipWhile \nListExtensions.take \ntake \nListExtensions.takeWhile \ntakeWhile \nListExtensions.truncate \ntruncate \nListExtensions.where \nwhere \nListExtensions.windowed \nwindowed \nListExtensions.indexed \nindexed \nListExtensions.exactlyOne \nexactlyOne \nListExtensions.sortByDescending \nsortByDescending \nListExtensions.tryFindIndexBack \ntryFindIndexBack \nListExtensions.tryFindBack \ntryFindBack \nListExtensions.tryItem \ntryItem \nListExtensions.tail \ntail \nListExtensions.head \nhead \nListExtensions.last \nlast \nListExtensions.tryLast \ntryLast \nListExtensions.tryHead \ntryHead"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#append","title":"ListExtensions.append","content":"ListExtensions.append \nappend \nBuilds a new list that contains the elements of the first list followed by the elements of the second list."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#collect","title":"ListExtensions.collect","content":"ListExtensions.collect \ncollect \nFor each element of the list, applies the given function. Concatenates all the results and return the combined list."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#concat","title":"ListExtensions.concat","content":"ListExtensions.concat \nconcat \nBuilds a new list that contains the elements of each of the given sequence of  lists."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#tryPick","title":"ListExtensions.tryPick","content":"ListExtensions.tryPick \ntryPick \nApplies the given function to successive elements, returning the first\n result where function returns <code>Some(x)</code> for some <code>x</code>. If the function \n never returns <code>Some(x)</code> then <code>None</code> is returned."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#pick","title":"ListExtensions.pick","content":"ListExtensions.pick \npick \nApplies the given function to successive elements, returning the first\n result where function returns <code>Some(x)</code> for some <code>x</code>. If the function \n never returns <code>Some(x)</code> then <code>KeyNotFoundException</code> is raised."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#choose","title":"ListExtensions.choose","content":"ListExtensions.choose \nchoose \nApplies the given function to each element of the list. Returns\n the list comprised of the results \"x\" for each element where\n the function returns Some(x)"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#exists","title":"ListExtensions.exists","content":"ListExtensions.exists \nexists \nTests if any element of the list satisfies the given predicate. \nThe predicate is applied to the elements of the input list. If any application \n returns true then the overall result is true and no further elements are tested. \n Otherwise, false is returned."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#filter","title":"ListExtensions.filter","content":"ListExtensions.filter \nfilter \nReturns a new collection containing only the elements of the collection\n for which the given predicate returns \"true\"."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#find","title":"ListExtensions.find","content":"ListExtensions.find \nfind \nReturns the first element for which the given function returns 'true'.\n Raise <code>KeyNotFoundException</code> if no such element exists."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#findIndex","title":"ListExtensions.findIndex","content":"ListExtensions.findIndex \nfindIndex \nReturns the index of the first element in the list\n that satisfies the given predicate. Raise <code>KeyNotFoundException</code> if \n none of the elements satisy the predicate."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#forall","title":"ListExtensions.forall","content":"ListExtensions.forall \nforall \nTests if all elements of the list satisfy the given predicate. \nThe predicate is applied to the elements of the input collection. If any application \n returns false then the overall result is false and no further elements are tested. \n Otherwise, true is returned."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#fold","title":"ListExtensions.fold","content":"ListExtensions.fold \nfold \nApplies a function to each element of the collection, threading an accumulator argument\n through the computation. If the input function is <code>f</code> and the elements are <code>i0...iN</code> then computes \n <code>f (... (f s i0)...) iN</code>"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#foldBack","title":"ListExtensions.foldBack","content":"ListExtensions.foldBack \nfoldBack \nApplies a function to each element of the list, threading an accumulator argument\n through the computation. If the input function is <code>f</code> and the elements are <code>i0...iN</code> then computes \n <code>f i0 (...(f iN s))</code>"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#iter","title":"ListExtensions.iter","content":"ListExtensions.iter \niter \nApplies the given function to each element of the list."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#iteri","title":"ListExtensions.iteri","content":"ListExtensions.iteri \niteri \nApplies the given function to each element of the list. The integer passed to the\n function indicates the index of element."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#length","title":"ListExtensions.length","content":"ListExtensions.length \nlength \nReturns the length of an list. You can also use property arr.Length."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#length","title":"ListExtensions.length","content":"ListExtensions.length \nlength \nReturns the length of an list. You can also use property arr.Length."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#map","title":"ListExtensions.map","content":"ListExtensions.map \nmap \nBuilds a new list whose elements are the results of applying the given function\n to each of the elements of the list."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#mapi","title":"ListExtensions.mapi","content":"ListExtensions.mapi \nmapi \nBuilds a new list whose elements are the results of applying the given function\n to each of the elements of the list. The integer index passed to the\n function indicates the index of element being transformed."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#partition","title":"ListExtensions.partition","content":"ListExtensions.partition \npartition \nSplits the collection into two collections, containing the \n elements for which the given predicate returns \"true\" and \"false\"\n respectively."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#permute","title":"ListExtensions.permute","content":"ListExtensions.permute \npermute \nReturns an list with all elements permuted according to the\n specified permutation."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#reduce","title":"ListExtensions.reduce","content":"ListExtensions.reduce \nreduce \nApplies a function to each element of the list, threading an accumulator argument\n through the computation. If the input function is <code>f</code> and the elements are <code>i0...iN</code> \n then computes <code>f (... (f i0 i1)...) iN</code>.\n Raises ArgumentException if the list has size zero."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#reduceBack","title":"ListExtensions.reduceBack","content":"ListExtensions.reduceBack \nreduceBack \nApplies a function to each element of the list, threading an accumulator argument\n through the computation. If the input function is <code>f</code> and the elements are <code>i0...iN</code> \n then computes <code>f i0 (...(f iN-1 iN))</code>.\n Raises ArgumentException if the list has size zero."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#reverse","title":"ListExtensions.reverse","content":"ListExtensions.reverse \nreverse \nReturns a new list with the elements in reverse order."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#scan","title":"ListExtensions.scan","content":"ListExtensions.scan \nscan \nLike <code>fold</code>, but return the intermediary and final results."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#scanBack","title":"ListExtensions.scanBack","content":"ListExtensions.scanBack \nscanBack \nLike <code>foldBack</code>, but return both the intermediary and final results."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#sortBy","title":"ListExtensions.sortBy","content":"ListExtensions.sortBy \nsortBy \nSorts the elements of an list, using the given projection for the keys and returning a new list. \n Elements are compared using Operators.compare. \nThis is not a stable sort, i.e. the original order of equal elements is not necessarily preserved. \n For a stable sort, consider using Seq.sort."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#sortWith","title":"ListExtensions.sortWith","content":"ListExtensions.sortWith \nsortWith \nSorts the elements of an list, using the given comparison function as the order, returning a new list. \nThis is not a stable sort, i.e. the original order of equal elements is not necessarily preserved. \n For a stable sort, consider using Seq.sort."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#toSeq","title":"ListExtensions.toSeq","content":"ListExtensions.toSeq \ntoSeq \nViews the given list as a sequence."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#tryFind","title":"ListExtensions.tryFind","content":"ListExtensions.tryFind \ntryFind \nReturns the first element for which the given function returns <code>true</code>.\n Return <code>None</code> if no such element exists."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#tryFindIndex","title":"ListExtensions.tryFindIndex","content":"ListExtensions.tryFindIndex \ntryFindIndex \nReturns the index of the first element in the list\n that satisfies the given predicate."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#zip","title":"ListExtensions.zip","content":"ListExtensions.zip \nzip \nCombines the two lists into an list of pairs. The two lists must have equal lengths, otherwise an <code>ArgumentException</code> is\n raised."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#zip3","title":"ListExtensions.zip3","content":"ListExtensions.zip3 \nzip3 \nCombines three lists into an list of pairs. The three lists must have equal lengths, otherwise an <code>ArgumentException</code> is\n raised."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#countBy","title":"ListExtensions.countBy","content":"ListExtensions.countBy \ncountBy \nApplies a key-generating function to each element of a list and returns a list yielding unique\n keys and their number of occurrences in the original list."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#distinctBy","title":"ListExtensions.distinctBy","content":"ListExtensions.distinctBy \ndistinctBy \nReturns a list that contains no duplicate entries according to the \n generic hash and equality comparisons on the keys returned by the given key-generating function.\n If an element occurs multiple times in the list then the later occurrences are discarded."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#groupBy","title":"ListExtensions.groupBy","content":"ListExtensions.groupBy \ngroupBy \nApplies a key-generating function to each element of a list and yields a list of \n unique keys. Each unique key contains a list of all elements that match \n to this key."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#pairwise","title":"ListExtensions.pairwise","content":"ListExtensions.pairwise \npairwise \nReturns a list of each element in the input list and its predecessor, with the\n exception of the first element which is only returned as the predecessor of the second element."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#skip","title":"ListExtensions.skip","content":"ListExtensions.skip \nskip \nReturns the list after removing the first N elements."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#skipWhile","title":"ListExtensions.skipWhile","content":"ListExtensions.skipWhile \nskipWhile \nBypasses elements in a list while the given predicate returns <code>true</code>, and then returns\n the remaining elements of the list."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#take","title":"ListExtensions.take","content":"ListExtensions.take \ntake \nReturns the first N elements of the list. \nThrows <code>InvalidOperationException</code>\n if the count exceeds the number of elements in the list. <code>List.truncate</code>\n returns as many items as the list contains instead of throwing an exception."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#takeWhile","title":"ListExtensions.takeWhile","content":"ListExtensions.takeWhile \ntakeWhile \nReturns a list that contains all elements of the original list while the \n given predicate returns <code>true</code>, and then returns no further elements."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#truncate","title":"ListExtensions.truncate","content":"ListExtensions.truncate \ntruncate \nReturns at most N elements in a new list."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#where","title":"ListExtensions.where","content":"ListExtensions.where \nwhere \nReturns a new list containing only the elements of the list\n for which the given predicate returns \"true\""},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#windowed","title":"ListExtensions.windowed","content":"ListExtensions.windowed \nwindowed \nReturns a list of sliding windows containing elements drawn from the input\n list. Each window is returned as a fresh list."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#indexed","title":"ListExtensions.indexed","content":"ListExtensions.indexed \nindexed \nReturns a list of sliding windows containing elements drawn from the input\n list. Each window is returned as a fresh list."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#exactlyOne","title":"ListExtensions.exactlyOne","content":"ListExtensions.exactlyOne \nexactlyOne \nReturns the only element of the list."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#sortByDescending","title":"ListExtensions.sortByDescending","content":"ListExtensions.sortByDescending \nsortByDescending \nSorts the given list in descending order using keys given by the given projection. Keys are compared using Operators.compare. \nThis is a stable sort, i.e. the original order of equal elements is preserved."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#tryFindIndexBack","title":"ListExtensions.tryFindIndexBack","content":"ListExtensions.tryFindIndexBack \ntryFindIndexBack \nReturns the index of the last element in the list\n that satisfies the given predicate.\n Return <code>None</code> if no such element exists."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#tryFindBack","title":"ListExtensions.tryFindBack","content":"ListExtensions.tryFindBack \ntryFindBack \nReturns the last element for which the given function returns <code>true.</code>.\n Return <code>None</code> if no such element exists."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#tryItem","title":"ListExtensions.tryItem","content":"ListExtensions.tryItem \ntryItem \nTries to find the nth element in the list.\n Returns <code>None</code> if index is negative or the list does not contain enough elements."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#tail","title":"ListExtensions.tail","content":"ListExtensions.tail \ntail \nReturns the list after removing the first element."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#head","title":"ListExtensions.head","content":"ListExtensions.head \nhead \nReturns the first element of the list."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#last","title":"ListExtensions.last","content":"ListExtensions.last \nlast \nReturns the last element of the list."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#tryLast","title":"ListExtensions.tryLast","content":"ListExtensions.tryLast \ntryLast \nReturns the last element of the list.\n Return <code>None</code> if no such element exists."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensions.html#tryHead","title":"ListExtensions.tryHead","content":"ListExtensions.tryHead \ntryHead \nReturns the first element of the list, or\n <code>None</code> if the list is empty."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-nativeptrextensions.html","title":"NativePtrExtensions","content":"NativePtrExtensions \nFluent extension operations on native pointers. \nNativePtrExtensions.toNativeInt \ntoNativeInt \nNativePtrExtensions.add \nadd \nNativePtrExtensions.read \nread \nNativePtrExtensions.write \nwrite \nNativePtrExtensions.Item \nItem \nNativePtrExtensions.Item \nItem \nNativePtrExtensions.Item \nItem \nNativePtrExtensions.Item \nItem"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-nativeptrextensions.html#toNativeInt","title":"NativePtrExtensions.toNativeInt","content":"NativePtrExtensions.toNativeInt \ntoNativeInt \nReturns a machine address for a given typed native pointer."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-nativeptrextensions.html#add","title":"NativePtrExtensions.add","content":"NativePtrExtensions.add \nadd \nReturns a typed native pointer by adding index * sizeof<'T> to the \n given input pointer."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-nativeptrextensions.html#read","title":"NativePtrExtensions.read","content":"NativePtrExtensions.read \nread \nDereferences the given typed native pointer."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-nativeptrextensions.html#write","title":"NativePtrExtensions.write","content":"NativePtrExtensions.write \nwrite \nAssigns the <code>value</code> into the memory location referenced by the given typed native pointer."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-nativeptrextensions.html#Item","title":"NativePtrExtensions.Item","content":"NativePtrExtensions.Item \nItem \nGets or assigns the memory location referenced by the typed native \n pointer computed by adding index * sizeof<'T> to the given input pointer."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-nativeptrextensions.html#Item","title":"NativePtrExtensions.Item","content":"NativePtrExtensions.Item \nItem \nGets or assigns the memory location referenced by the typed native \n pointer computed by adding index * sizeof<'T> to the given input pointer."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-nativeptrextensions.html#Item","title":"NativePtrExtensions.Item","content":"NativePtrExtensions.Item \nItem \nGets or assigns the memory location referenced by the typed native \n pointer computed by adding index * sizeof<'T> to the given input pointer."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-nativeptrextensions.html#Item","title":"NativePtrExtensions.Item","content":"NativePtrExtensions.Item \nItem \nGets or assigns the memory location referenced by the typed native \n pointer computed by adding index * sizeof<'T> to the given input pointer."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-nullableextensions.html","title":"NullableExtensions","content":"NullableExtensions \nFluent extension operations on options. \nNullableExtensions.toOption \ntoOption"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-nullableextensions.html#toOption","title":"NullableExtensions.toOption","content":"NullableExtensions.toOption \ntoOption \nConvert a Nullable value to an option."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-observableextensions.html","title":"ObservableExtensions","content":"ObservableExtensions \nFluent extension operations on observables. \nObservableExtensions.merge \nmerge \nObservableExtensions.map \nmap \nObservableExtensions.filter \nfilter \nObservableExtensions.partition \npartition \nObservableExtensions.split \nsplit \nObservableExtensions.choose \nchoose \nObservableExtensions.scan \nscan \nObservableExtensions.add \nadd \nObservableExtensions.subscribe \nsubscribe \nObservableExtensions.pairwise \npairwise"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-observableextensions.html#merge","title":"ObservableExtensions.merge","content":"ObservableExtensions.merge \nmerge \nReturns an observable for the merged observations from the sources. \n The returned object propagates success and error values arising \n from either source and completes when both the sources have completed. \nFor each observer, the registered intermediate observing object is not \n thread safe. That is, observations arising from the sources must not \n be triggered concurrently on different threads."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-observableextensions.html#map","title":"ObservableExtensions.map","content":"ObservableExtensions.map \nmap \nReturns an observable which transforms the observations of the source by the \n given function. The transformation function is executed once for each \n subscribed observer. The returned object also propagates error observations \n arising from the source and completes when the source completes."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-observableextensions.html#filter","title":"ObservableExtensions.filter","content":"ObservableExtensions.filter \nfilter \nReturns an observable which filters the observations of the source \n by the given function. The observable will see only those observations\n for which the predicate returns true. The predicate is executed once for \n each subscribed observer. The returned object also propagates error \n observations arising from the source and completes when the source completes."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-observableextensions.html#partition","title":"ObservableExtensions.partition","content":"ObservableExtensions.partition \npartition \nReturns two observables which partition the observations of the source by \n the given function. The first will trigger observations for those values \n for which the predicate returns true. The second will trigger observations \n for those values where the predicate returns false. The predicate is \n executed once for each subscribed observer. Both also propagate all error \n observations arising from the source and each completes when the source \n completes."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-observableextensions.html#split","title":"ObservableExtensions.split","content":"ObservableExtensions.split \nsplit \nReturns two observables which split the observations of the source by the \n given function. The first will trigger observations <code>x</code> for which the \n splitter returns <code>Choice1Of2 x</code>. The second will trigger observations \n <code>y</code> for which the splitter returns <code>Choice2Of2 y</code> The splitter is \n executed once for each subscribed observer. Both also propagate error \n observations arising from the source and each completes when the source \n completes."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-observableextensions.html#choose","title":"ObservableExtensions.choose","content":"ObservableExtensions.choose \nchoose \nReturns an observable which chooses a projection of observations from the source \n using the given function. The returned object will trigger observations <code>x</code>\n for which the splitter returns <code>Some x</code>. The returned object also propagates \n all errors arising from the source and completes when the source completes."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-observableextensions.html#scan","title":"ObservableExtensions.scan","content":"ObservableExtensions.scan \nscan \nReturns an observable which, for each observer, allocates an item of state\n and applies the given accumulating function to successive values arising from\n the input. The returned object will trigger observations for each computed \n state value, excluding the initial value. The returned object propagates \n all errors arising from the source and completes when the source completes. \nFor each observer, the registered intermediate observing object is not thread safe.\n That is, observations arising from the source must not be triggered concurrently \n on different threads."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-observableextensions.html#add","title":"ObservableExtensions.add","content":"ObservableExtensions.add \nadd \nCreates an observer which permanently subscribes to the given observable and which calls\n the given function for each observation."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-observableextensions.html#subscribe","title":"ObservableExtensions.subscribe","content":"ObservableExtensions.subscribe \nsubscribe \nCreates an observer which subscribes to the given observable and which calls\n the given function for each observation."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-observableextensions.html#pairwise","title":"ObservableExtensions.pairwise","content":"ObservableExtensions.pairwise \npairwise \nReturns a new observable that triggers on the second and subsequent triggerings of the input observable.\n The Nth triggering of the input observable passes the arguments from the N-1th and Nth triggering as\n a pair. The argument passed to the N-1th triggering is held in hidden internal state until the \n Nth triggering occurs. \nFor each observer, the registered intermediate observing object is not thread safe.\n That is, observations arising from the source must not be triggered concurrently \n on different threads."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-optionextensions.html","title":"OptionExtensions","content":"OptionExtensions \nFluent extension operations on options. \nOptionExtensions.count \ncount \nOptionExtensions.count \ncount \nOptionExtensions.fold \nfold \nOptionExtensions.foldBack \nfoldBack \nOptionExtensions.exists \nexists \nOptionExtensions.forall \nforall \nOptionExtensions.iter \niter \nOptionExtensions.map \nmap \nOptionExtensions.bind \nbind \nOptionExtensions.toArray \ntoArray \nOptionExtensions.toList \ntoList \nOptionExtensions.filter \nfilter"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-optionextensions.html#count","title":"OptionExtensions.count","content":"OptionExtensions.count \ncount \nEvaluates to <code>match inp with None -> 0 | Some _ -> 1</code>."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-optionextensions.html#count","title":"OptionExtensions.count","content":"OptionExtensions.count \ncount \nEvaluates to <code>match inp with None -> 0 | Some _ -> 1</code>."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-optionextensions.html#fold","title":"OptionExtensions.fold","content":"OptionExtensions.fold \nfold \n<code>fold f s inp</code> evaluates to <code>match inp with None -> s | Some x -> f s x</code>."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-optionextensions.html#foldBack","title":"OptionExtensions.foldBack","content":"OptionExtensions.foldBack \nfoldBack \n<code>fold f inp s</code> evaluates to <code>match inp with None -> s | Some x -> f x s</code>."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-optionextensions.html#exists","title":"OptionExtensions.exists","content":"OptionExtensions.exists \nexists \n<code>exists p inp</code> evaluates to <code>match inp with None -> false | Some x -> p x</code>."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-optionextensions.html#forall","title":"OptionExtensions.forall","content":"OptionExtensions.forall \nforall \n<code>forall p inp</code> evaluates to <code>match inp with None -> true | Some x -> p x</code>."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-optionextensions.html#iter","title":"OptionExtensions.iter","content":"OptionExtensions.iter \niter \n<code>iter f inp</code> executes <code>match inp with None -> () | Some x -> f x</code>."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-optionextensions.html#map","title":"OptionExtensions.map","content":"OptionExtensions.map \nmap \n<code>map f inp</code> evaluates to <code>match inp with None -> None | Some x -> Some (f x)</code>."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-optionextensions.html#bind","title":"OptionExtensions.bind","content":"OptionExtensions.bind \nbind \n<code>bind f inp</code> evaluates to <code>match inp with None -> None | Some x -> f x</code>"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-optionextensions.html#toArray","title":"OptionExtensions.toArray","content":"OptionExtensions.toArray \ntoArray \nConvert the option to an array of length 0 or 1."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-optionextensions.html#toList","title":"OptionExtensions.toList","content":"OptionExtensions.toList \ntoList \nConvert the option to a list of length 0 or 1."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-optionextensions.html#filter","title":"OptionExtensions.filter","content":"OptionExtensions.filter \nfilter \n<code>filter f inp</code> evaluates to <code>match inp with None -> None | Some x -> if f x then Some x else None</code>."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html","title":"SeqExtensions","content":"SeqExtensions \nFluent extension operations on sequences. \nSeqExtensions.SeqExtensionsConstrained \nSeqExtensionsConstrained \nSeqExtensions.append \nappend \nSeqExtensions.cache \ncache \nSeqExtensions.choose \nchoose \nSeqExtensions.chunkBySize \nchunkBySize \nSeqExtensions.collect \ncollect \nSeqExtensions.compareWith \ncompareWith \nSeqExtensions.countBy \ncountBy \nSeqExtensions.distinctBy \ndistinctBy \nSeqExtensions.splitInto \nsplitInto \nSeqExtensions.exists \nexists \nSeqExtensions.filter \nfilter \nSeqExtensions.where \nwhere \nSeqExtensions.find \nfind \nSeqExtensions.findBack \nfindBack \nSeqExtensions.findIndex \nfindIndex \nSeqExtensions.findIndexBack \nfindIndexBack \nSeqExtensions.fold \nfold \nSeqExtensions.foldBack \nfoldBack \nSeqExtensions.forall \nforall \nSeqExtensions.groupBy \ngroupBy \nSeqExtensions.head \nhead \nSeqExtensions.tryHead \ntryHead \nSeqExtensions.last \nlast \nSeqExtensions.tryLast \ntryLast \nSeqExtensions.exactlyOne \nexactlyOne \nSeqExtensions.IsEmpty \nIsEmpty \nSeqExtensions.IsEmpty \nIsEmpty \nSeqExtensions.indexed \nindexed \nSeqExtensions.Item \nItem \nSeqExtensions.iter \niter \nSeqExtensions.iteri \niteri \nSeqExtensions.length \nlength \nSeqExtensions.length \nlength \nSeqExtensions.map \nmap \nSeqExtensions.mapi \nmapi \nSeqExtensions.pairwise \npairwise \nSeqExtensions.mapFold \nmapFold \nSeqExtensions.mapFoldBack \nmapFoldBack \nSeqExtensions.permute \npermute \nSeqExtensions.pick \npick \nSeqExtensions.readonly \nreadonly \nSeqExtensions.reduce \nreduce \nSeqExtensions.reduceBack \nreduceBack \nSeqExtensions.reverse \nreverse \nSeqExtensions.scan \nscan \nSeqExtensions.scanBack \nscanBack \nSeqExtensions.skip \nskip \nSeqExtensions.skipWhile \nskipWhile \nSeqExtensions.sortWith \nsortWith \nSeqExtensions.sortBy \nsortBy \nSeqExtensions.sortByDescending \nsortByDescending \nSeqExtensions.tail \ntail \nSeqExtensions.take \ntake \nSeqExtensions.takeWhile \ntakeWhile \nSeqExtensions.toArray \ntoArray \nSeqExtensions.toList \ntoList \nSeqExtensions.tryFind \ntryFind \nSeqExtensions.tryFindBack \ntryFindBack \nSeqExtensions.tryFindIndex \ntryFindIndex \nSeqExtensions.tryItem \ntryItem \nSeqExtensions.tryFindIndexBack \ntryFindIndexBack \nSeqExtensions.tryPick \ntryPick \nSeqExtensions.truncate \ntruncate \nSeqExtensions.windowed \nwindowed \nSeqExtensions.zip \nzip \nSeqExtensions.zip3 \nzip3"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#append","title":"SeqExtensions.append","content":"SeqExtensions.append \nappend \nWraps the two given enumerations as a single concatenated\n enumeration. \nThe returned sequence may be passed between threads safely. However, \n individual IEnumerator values generated from the returned sequence should not be accessed\n concurrently."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#cache","title":"SeqExtensions.cache","content":"SeqExtensions.cache \ncache \nReturns a sequence that corresponds to a cached version of the input sequence.\n This result sequence will have the same elements as the input sequence. The result \n can be enumerated multiple times. The input sequence will be enumerated at most \n once and only as far as is necessary.  Caching a sequence is typically useful when repeatedly\n evaluating items in the original sequence is computationally expensive or if\n iterating the sequence causes side-effects that the user does not want to be\n repeated multiple times.\n\n Enumeration of the result sequence is thread safe in the sense that multiple independent IEnumerator\n values may be used simultaneously from different threads (accesses to \n the internal lookaside table are thread safe). Each individual IEnumerator\n is not typically thread safe and should not be accessed concurrently. \nOnce enumeration of the input sequence has started,\n it's enumerator will be kept live by this object until the enumeration has completed.\n At that point, the enumerator will be disposed. \n\n The enumerator may be disposed and underlying cache storage released by \n converting the returned sequence object to type IDisposable, and calling the Dispose method\n on this object. The sequence object may then be re-enumerated and a fresh enumerator will\n be used."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#choose","title":"SeqExtensions.choose","content":"SeqExtensions.choose \nchoose \nApplies the given function to each element of the list. Return\n the list comprised of the results \"x\" for each element where\n the function returns Some(x). \nThe returned sequence may be passed between threads safely. However, \n individual IEnumerator values generated from the returned sequence should not\n be accessed concurrently."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#chunkBySize","title":"SeqExtensions.chunkBySize","content":"SeqExtensions.chunkBySize \nchunkBySize \nDivides the input sequence into chunks of size at most <code>chunkSize</code>."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#collect","title":"SeqExtensions.collect","content":"SeqExtensions.collect \ncollect \nApplies the given function to each element of the sequence and concatenates all the\n results. \nRemember sequence is lazy, effects are delayed until it is enumerated."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#compareWith","title":"SeqExtensions.compareWith","content":"SeqExtensions.compareWith \ncompareWith \nCompares two sequences using the given comparison function, element by element.\n Returns the first non-zero result from the comparison function.  If the end of a sequence\n is reached it returns a -1 if the first sequence is shorter and a 1 if the second sequence\n is shorter."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#countBy","title":"SeqExtensions.countBy","content":"SeqExtensions.countBy \ncountBy \nApplies a key-generating function to each element of a sequence and returns a sequence yielding unique\n keys and their number of occurrences in the original sequence. \nNote that this function returns a sequence that digests the whole initial sequence as soon as \n that sequence is iterated. As a result this function should not be used with \n large or infinite sequences. The function makes no assumption on the ordering of the original \n sequence."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#distinctBy","title":"SeqExtensions.distinctBy","content":"SeqExtensions.distinctBy \ndistinctBy \nReturns a sequence that contains no duplicate entries according to the \n generic hash and equality comparisons on the keys returned by the given key-generating function.\n If an element occurs multiple times in the sequence then the later occurrences are discarded."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#splitInto","title":"SeqExtensions.splitInto","content":"SeqExtensions.splitInto \nsplitInto \nSplits the input sequence into at most <code>count</code> chunks. \nThis function returns a sequence that digests the whole initial sequence as soon as that\n sequence is iterated. As a result this function should not be used with large or infinite sequences."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#exists","title":"SeqExtensions.exists","content":"SeqExtensions.exists \nexists \nTests if any element of the sequence satisfies the given predicate. \nThe predicate is applied to the elements of the input sequence. If any application \n returns true then the overall result is true and no further elements are tested. \n Otherwise, false is returned."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#filter","title":"SeqExtensions.filter","content":"SeqExtensions.filter \nfilter \nReturns a new collection containing only the elements of the collection\n for which the given predicate returns \"true\". This is a synonym for Seq.where. \nThe returned sequence may be passed between threads safely. However, \n individual IEnumerator values generated from the returned sequence should not be accessed concurrently.\n\n Remember sequence is lazy, effects are delayed until it is enumerated."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#where","title":"SeqExtensions.where","content":"SeqExtensions.where \nwhere \nReturns a new collection containing only the elements of the collection\n for which the given predicate returns \"true\". \nThe returned sequence may be passed between threads safely. However, \n individual IEnumerator values generated from the returned sequence should not be accessed concurrently.\n\n Remember sequence is lazy, effects are delayed until it is enumerated.\n \n A synonym for Seq.filter."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#find","title":"SeqExtensions.find","content":"SeqExtensions.find \nfind \nReturns the first element for which the given function returns <code>true</code>."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#findBack","title":"SeqExtensions.findBack","content":"SeqExtensions.findBack \nfindBack \nReturns the last element for which the given function returns <code>true</code>. \nThis function digests the whole initial sequence as soon as it is called. As a\n result this function should not be used with large or infinite sequences."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#findIndex","title":"SeqExtensions.findIndex","content":"SeqExtensions.findIndex \nfindIndex \nReturns the index of the first element for which the given function returns <code>true</code>."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#findIndexBack","title":"SeqExtensions.findIndexBack","content":"SeqExtensions.findIndexBack \nfindIndexBack \nReturns the index of the last element for which the given function returns <code>true</code>. \nThis function digests the whole initial sequence as soon as it is called. As a\n result this function should not be used with large or infinite sequences."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#fold","title":"SeqExtensions.fold","content":"SeqExtensions.fold \nfold \nApplies a function to each element of the collection, threading an accumulator argument\n through the computation. If the input function is <code>f</code> and the elements are <code>i0...iN</code> \n then computes <code>f (... (f s i0)...) iN</code>"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#foldBack","title":"SeqExtensions.foldBack","content":"SeqExtensions.foldBack \nfoldBack \nApplies a function to each element of the collection, starting from the end, threading an accumulator argument\n through the computation. If the input function is <code>f</code> and the elements are <code>i0...iN</code>\n then computes <code>f i0 (... (f iN s)...)</code>"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#forall","title":"SeqExtensions.forall","content":"SeqExtensions.forall \nforall \nTests if all elements of the sequence satisfy the given predicate. \nThe predicate is applied to the elements of the input sequence. If any application \n returns false then the overall result is false and no further elements are tested. \n Otherwise, true is returned."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#groupBy","title":"SeqExtensions.groupBy","content":"SeqExtensions.groupBy \ngroupBy \nApplies a key-generating function to each element of a sequence and yields a sequence of \n unique keys. Each unique key contains a sequence of all elements that match \n to this key. \nThis function returns a sequence that digests the whole initial sequence as soon as \n that sequence is iterated. As a result this function should not be used with \n large or infinite sequences. The function makes no assumption on the ordering of the original \n sequence."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#head","title":"SeqExtensions.head","content":"SeqExtensions.head \nhead \nReturns the first element of the sequence."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#tryHead","title":"SeqExtensions.tryHead","content":"SeqExtensions.tryHead \ntryHead \nReturns the first element of the sequence, or None if the sequence is empty."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#last","title":"SeqExtensions.last","content":"SeqExtensions.last \nlast \nReturns the last element of the sequence."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#tryLast","title":"SeqExtensions.tryLast","content":"SeqExtensions.tryLast \ntryLast \nReturns the last element of the sequence.\n Return <code>None</code> if no such element exists."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#exactlyOne","title":"SeqExtensions.exactlyOne","content":"SeqExtensions.exactlyOne \nexactlyOne \nReturns the only element of the sequence."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#IsEmpty","title":"SeqExtensions.IsEmpty","content":"SeqExtensions.IsEmpty \nIsEmpty \nReturns true if the sequence contains no elements, false otherwise."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#IsEmpty","title":"SeqExtensions.IsEmpty","content":"SeqExtensions.IsEmpty \nIsEmpty \nReturns true if the sequence contains no elements, false otherwise."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#indexed","title":"SeqExtensions.indexed","content":"SeqExtensions.indexed \nindexed \nBuilds a new collection whose elements are the corresponding elements of the input collection\n paired with the integer index (from 0) of each element."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#Item","title":"SeqExtensions.Item","content":"SeqExtensions.Item \nItem \nComputes the element at the specified index in the collection."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#iter","title":"SeqExtensions.iter","content":"SeqExtensions.iter \niter \nApplies the given function to each element of the collection."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#iteri","title":"SeqExtensions.iteri","content":"SeqExtensions.iteri \niteri \nApplies the given function to each element of the collection. The integer passed to the\n function indicates the index of element."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#length","title":"SeqExtensions.length","content":"SeqExtensions.length \nlength \nReturns the length of the sequence"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#length","title":"SeqExtensions.length","content":"SeqExtensions.length \nlength \nReturns the length of the sequence"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#map","title":"SeqExtensions.map","content":"SeqExtensions.map \nmap \nBuilds a new collection whose elements are the results of applying the given function\n to each of the elements of the collection.  The given function will be applied\n as elements are demanded using the <code>MoveNext</code> method on enumerators retrieved from the\n object. \nThe returned sequence may be passed between threads safely. However, \n individual IEnumerator values generated from the returned sequence should not be accessed concurrently."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#mapi","title":"SeqExtensions.mapi","content":"SeqExtensions.mapi \nmapi \nBuilds a new collection whose elements are the results of applying the given function\n to each of the elements of the collection. The integer index passed to the\n function indicates the index (from 0) of element being transformed."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#pairwise","title":"SeqExtensions.pairwise","content":"SeqExtensions.pairwise \npairwise \nReturns a sequence of each element in the input sequence and its predecessor, with the\n exception of the first element which is only returned as the predecessor of the second element."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#mapFold","title":"SeqExtensions.mapFold","content":"SeqExtensions.mapFold \nmapFold \nCombines map and fold. Builds a new collection whose elements are the results of applying the given function\n to each of the elements of the collection. The function is also used to accumulate a final value. \nThis function digests the whole initial sequence as soon as it is called. As a result this function should\n not be used with large or infinite sequences."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#mapFoldBack","title":"SeqExtensions.mapFoldBack","content":"SeqExtensions.mapFoldBack \nmapFoldBack \nCombines map and foldBack. Builds a new collection whose elements are the results of applying the given function\n to each of the elements of the collection. The function is also used to accumulate a final value. \nThis function digests the whole initial sequence as soon as it is called. As a result this function should\n not be used with large or infinite sequences."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#permute","title":"SeqExtensions.permute","content":"SeqExtensions.permute \npermute \nReturns a sequence with all elements permuted according to the\n specified permutation. \nNote that this function returns a sequence that digests the whole initial sequence as soon as\n that sequence is iterated. As a result this function should not be used with\n large or infinite sequences."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#pick","title":"SeqExtensions.pick","content":"SeqExtensions.pick \npick \nApplies the given function to successive elements, returning the first\n <code>x</code> where the function returns \"Some(x)\"."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#readonly","title":"SeqExtensions.readonly","content":"SeqExtensions.readonly \nreadonly \nBuilds a new sequence object that delegates to the given sequence object. This ensures \n the original sequence cannot be rediscovered and mutated by a type cast. For example, \n if given an array the returned sequence will return the elements of the array, but\n you cannot cast the returned sequence object to an array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#reduce","title":"SeqExtensions.reduce","content":"SeqExtensions.reduce \nreduce \nApplies a function to each element of the sequence, threading an accumulator argument\n through the computation. Begin by applying the function to the first two elements.\n Then feed this result into the function along with the third element and so on.  \n Return the final result."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#reduceBack","title":"SeqExtensions.reduceBack","content":"SeqExtensions.reduceBack \nreduceBack \nApplies a function to each element of the sequence, starting from the end, threading an accumulator argument\n through the computation. If the input function is <code>f</code> and the elements are <code>i0...iN</code> \n then computes <code>f i0 (...(f iN-1 iN))</code>."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#reverse","title":"SeqExtensions.reverse","content":"SeqExtensions.reverse \nreverse \nReturns a new sequence with the elements in reverse order."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#scan","title":"SeqExtensions.scan","content":"SeqExtensions.scan \nscan \nLike fold, but computes on-demand and returns the sequence of intermediary and final results."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#scanBack","title":"SeqExtensions.scanBack","content":"SeqExtensions.scanBack \nscanBack \nLike <code>foldBack</code>, but returns the sequence of intermediary and final results. \nThis function returns a sequence that digests the whole initial sequence as soon as that\n sequence is iterated. As a result this function should not be used with large or infinite sequences.\n "},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#skip","title":"SeqExtensions.skip","content":"SeqExtensions.skip \nskip \nReturns a sequence that skips N elements of the underlying sequence and then yields the\n remaining elements of the sequence."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#skipWhile","title":"SeqExtensions.skipWhile","content":"SeqExtensions.skipWhile \nskipWhile \nReturns a sequence that, when iterated, skips elements of the underlying sequence while the \n given predicate returns <code>true</code>, and then yields the remaining elements of the sequence."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#sortWith","title":"SeqExtensions.sortWith","content":"SeqExtensions.sortWith \nsortWith \nYields a sequence ordered using the given comparison function. \nThis function returns a sequence that digests the whole initial sequence as soon as\n that sequence is iterated. As a result this function should not be used with\n large or infinite sequences. The function makes no assumption on the ordering of the original\n sequence.\n\n This is a stable sort, that is the original order of equal elements is preserved."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#sortBy","title":"SeqExtensions.sortBy","content":"SeqExtensions.sortBy \nsortBy \nApplies a key-generating function to each element of a sequence and yield a sequence ordered\n by keys.  The keys are compared using generic comparison as implemented by <code>Operators.compare</code>. \nThis function returns a sequence that digests the whole initial sequence as soon as \n that sequence is iterated. As a result this function should not be used with \n large or infinite sequences. The function makes no assumption on the ordering of the original \n sequence.\n\n This is a stable sort, that is the original order of equal elements is preserved."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#sortByDescending","title":"SeqExtensions.sortByDescending","content":"SeqExtensions.sortByDescending \nsortByDescending \nApplies a key-generating function to each element of a sequence and yield a sequence ordered\n descending by keys.  The keys are compared using generic comparison as implemented by <code>Operators.compare</code>. \nThis function returns a sequence that digests the whole initial sequence as soon as \n that sequence is iterated. As a result this function should not be used with \n large or infinite sequences. The function makes no assumption on the ordering of the original \n sequence.\n\n This is a stable sort, that is the original order of equal elements is preserved."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#tail","title":"SeqExtensions.tail","content":"SeqExtensions.tail \ntail \nReturns a sequence that skips 1 element of the underlying sequence and then yields the\n remaining elements of the sequence."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#take","title":"SeqExtensions.take","content":"SeqExtensions.take \ntake \nReturns the first N elements of the sequence. \nThrows <code>InvalidOperationException</code>\n if the count exceeds the number of elements in the sequence. <code>Seq.truncate</code>\n returns as many items as the sequence contains instead of throwing an exception."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#takeWhile","title":"SeqExtensions.takeWhile","content":"SeqExtensions.takeWhile \ntakeWhile \nReturns a sequence that, when iterated, yields elements of the underlying sequence while the \n given predicate returns <code>true</code>, and then returns no further elements."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#toArray","title":"SeqExtensions.toArray","content":"SeqExtensions.toArray \ntoArray \nBuilds an array from the given collection."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#toList","title":"SeqExtensions.toList","content":"SeqExtensions.toList \ntoList \nBuilds a list from the given collection."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#tryFind","title":"SeqExtensions.tryFind","content":"SeqExtensions.tryFind \ntryFind \nReturns the first element for which the given function returns <code>true</code>.\n Return <code>None</code> if no such element exists."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#tryFindBack","title":"SeqExtensions.tryFindBack","content":"SeqExtensions.tryFindBack \ntryFindBack \nReturns the last element for which the given function returns <code>true</code>.\n Return <code>None</code> if no such element exists. \nThis function digests the whole initial sequence as soon as it is called. As a\n result this function should not be used with large or infinite sequences."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#tryFindIndex","title":"SeqExtensions.tryFindIndex","content":"SeqExtensions.tryFindIndex \ntryFindIndex \nReturns the index of the first element in the sequence \n that satisfies the given predicate. Return <code>None</code> if no such element exists."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#tryItem","title":"SeqExtensions.tryItem","content":"SeqExtensions.tryItem \ntryItem \nTries to find the nth element in the sequence.\n Returns <code>None</code> if index is negative or the input sequence does not contain enough elements."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#tryFindIndexBack","title":"SeqExtensions.tryFindIndexBack","content":"SeqExtensions.tryFindIndexBack \ntryFindIndexBack \nReturns the index of the last element in the sequence\n that satisfies the given predicate. Return <code>None</code> if no such element exists. \nThis function digests the whole initial sequence as soon as it is called. As a\n result this function should not be used with large or infinite sequences."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#tryPick","title":"SeqExtensions.tryPick","content":"SeqExtensions.tryPick \ntryPick \nApplies the given function to successive elements, returning the first\n result where the function returns \"Some(x)\"."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#truncate","title":"SeqExtensions.truncate","content":"SeqExtensions.truncate \ntruncate \nReturns a sequence that when enumerated returns at most N elements."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#windowed","title":"SeqExtensions.windowed","content":"SeqExtensions.windowed \nwindowed \nReturns a sequence that yields sliding windows containing elements drawn from the input\n sequence. Each window is returned as a fresh array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#zip","title":"SeqExtensions.zip","content":"SeqExtensions.zip \nzip \nCombines the two sequences into a list of pairs. The two sequences need not have equal lengths:\n when one sequence is exhausted any remaining elements in the other\n sequence are ignored."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions.html#zip3","title":"SeqExtensions.zip3","content":"SeqExtensions.zip3 \nzip3 \nCombines the three sequences into a list of triples. The sequences need not have equal lengths:\n when one sequence is exhausted any remaining elements in the other\n sequences are ignored."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions-seqextensionsconstrained.html","title":"SeqExtensionsConstrained","content":"SeqExtensionsConstrained \nFluent extension operations on sequences which require constrained types. \nSeqExtensionsConstrained.average \naverage \nSeqExtensionsConstrained.averageBy \naverageBy \nSeqExtensionsConstrained.contains \ncontains \nSeqExtensionsConstrained.distinct \ndistinct \nSeqExtensionsConstrained.except \nexcept \nSeqExtensionsConstrained.max \nmax \nSeqExtensionsConstrained.maxBy \nmaxBy \nSeqExtensionsConstrained.min \nmin \nSeqExtensionsConstrained.minBy \nminBy \nSeqExtensionsConstrained.sort \nsort \nSeqExtensionsConstrained.sortDescending \nsortDescending \nSeqExtensionsConstrained.sum \nsum \nSeqExtensionsConstrained.sumBy \nsumBy"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions-seqextensionsconstrained.html#average","title":"SeqExtensionsConstrained.average","content":"SeqExtensionsConstrained.average \naverage \nReturns the average of the elements in the sequence. \nThe elements are averaged using the <code>+</code> operator, <code>DivideByInt</code> method and <code>Zero</code> property \n associated with the element type."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions-seqextensionsconstrained.html#averageBy","title":"SeqExtensionsConstrained.averageBy","content":"SeqExtensionsConstrained.averageBy \naverageBy \nReturns the average of the results generated by applying the function to each element \n of the sequence. \nThe elements are averaged using the <code>+</code> operator, <code>DivideByInt</code> method and <code>Zero</code> property \n associated with the generated type."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions-seqextensionsconstrained.html#contains","title":"SeqExtensionsConstrained.contains","content":"SeqExtensionsConstrained.contains \ncontains \nTests if the sequence contains the specified element."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions-seqextensionsconstrained.html#distinct","title":"SeqExtensionsConstrained.distinct","content":"SeqExtensionsConstrained.distinct \ndistinct \nReturns a sequence that contains no duplicate entries according to generic hash and\n equality comparisons on the entries.\n If an element occurs multiple times in the sequence then the later occurrences are discarded."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions-seqextensionsconstrained.html#except","title":"SeqExtensionsConstrained.except","content":"SeqExtensionsConstrained.except \nexcept \nReturns a new sequence with the distinct elements of the second sequence which do not apear in the first sequence,\n using generic hash and equality comparisons to compare values. \nNote that this function returns a sequence that digests the whole of the first input sequence as soon as\n the result sequence is iterated. As a result this function should not be used with\n large or infinite sequences in the first parameter. The function makes no assumption on the ordering of the first input\n sequence."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions-seqextensionsconstrained.html#max","title":"SeqExtensionsConstrained.max","content":"SeqExtensionsConstrained.max \nmax \nReturns the greatest of all elements of the sequence, compared via Operators.max"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions-seqextensionsconstrained.html#maxBy","title":"SeqExtensionsConstrained.maxBy","content":"SeqExtensionsConstrained.maxBy \nmaxBy \nReturns the greatest of all elements of the sequence, compared via Operators.max on the function result."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions-seqextensionsconstrained.html#min","title":"SeqExtensionsConstrained.min","content":"SeqExtensionsConstrained.min \nmin \nReturns the lowest of all elements of the sequence, compared via <code>Operators.min</code>."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions-seqextensionsconstrained.html#minBy","title":"SeqExtensionsConstrained.minBy","content":"SeqExtensionsConstrained.minBy \nminBy \nReturns the lowest of all elements of the sequence, compared via Operators.min on the function result."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions-seqextensionsconstrained.html#sort","title":"SeqExtensionsConstrained.sort","content":"SeqExtensionsConstrained.sort \nsort \nYields a sequence ordered by keys. \nThis function returns a sequence that digests the whole initial sequence as soon as \n that sequence is iterated. As a result this function should not be used with \n large or infinite sequences. The function makes no assumption on the ordering of the original \n sequence.\n\n This is a stable sort, that is the original order of equal elements is preserved."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions-seqextensionsconstrained.html#sortDescending","title":"SeqExtensionsConstrained.sortDescending","content":"SeqExtensionsConstrained.sortDescending \nsortDescending \nYields a sequence ordered descending by keys. \nThis function returns a sequence that digests the whole initial sequence as soon as \n that sequence is iterated. As a result this function should not be used with \n large or infinite sequences. The function makes no assumption on the ordering of the original \n sequence.\n\n This is a stable sort, that is the original order of equal elements is preserved."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions-seqextensionsconstrained.html#sum","title":"SeqExtensionsConstrained.sum","content":"SeqExtensionsConstrained.sum \nsum \nReturns the sum of the elements in the sequence. \nThe elements are summed using the <code>+</code> operator and <code>Zero</code> property associated with the generated type."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-seqextensions-seqextensionsconstrained.html#sumBy","title":"SeqExtensionsConstrained.sumBy","content":"SeqExtensionsConstrained.sumBy \nsumBy \nReturns the sum of the results generated by applying the function to each element of the sequence. \nThe generated elements are summed using the <code>+</code> operator and <code>Zero</code> property associated with the generated type."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-stringextensions.html","title":"StringExtensions","content":"StringExtensions \nFluent extension operations on strings. \nStringExtensions.iter \niter \nStringExtensions.iteri \niteri \nStringExtensions.map \nmap \nStringExtensions.mapi \nmapi \nStringExtensions.collect \ncollect \nStringExtensions.forall \nforall \nStringExtensions.exists \nexists \nStringExtensions.replicate \nreplicate \nStringExtensions.length \nlength \nStringExtensions.length \nlength"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-stringextensions.html#iter","title":"StringExtensions.iter","content":"StringExtensions.iter \niter \nApplies the function <code>action</code> to each character in the string."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-stringextensions.html#iteri","title":"StringExtensions.iteri","content":"StringExtensions.iteri \niteri \nApplies the function <code>action</code> to the index of each character in the string and the\n character itself."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-stringextensions.html#map","title":"StringExtensions.map","content":"StringExtensions.map \nmap \nBuilds a new string whose characters are the results of applying the function <code>mapping</code>\n to each of the characters of the input string."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-stringextensions.html#mapi","title":"StringExtensions.mapi","content":"StringExtensions.mapi \nmapi \nBuilds a new string whose characters are the results of applying the function <code>mapping</code>\n to each character and index of the input string."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-stringextensions.html#collect","title":"StringExtensions.collect","content":"StringExtensions.collect \ncollect \nBuilds a new string whose characters are the results of applying the function <code>mapping</code>\n to each of the characters of the input string and concatenating the resulting\n strings."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-stringextensions.html#forall","title":"StringExtensions.forall","content":"StringExtensions.forall \nforall \nTests if all characters in the string satisfy the given predicate."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-stringextensions.html#exists","title":"StringExtensions.exists","content":"StringExtensions.exists \nexists \nTests if any character of the string satisfies the given predicate."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-stringextensions.html#replicate","title":"StringExtensions.replicate","content":"StringExtensions.replicate \nreplicate \nReturns a string by concatenating <code>count</code> instances of <code>str</code>."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-stringextensions.html#length","title":"StringExtensions.length","content":"StringExtensions.length \nlength \nReturns the length of the string."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-stringextensions.html#length","title":"StringExtensions.length","content":"StringExtensions.length \nlength \nReturns the length of the string."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensionsconstrained.html","title":"ArrayExtensionsConstrained","content":"ArrayExtensionsConstrained \nFluent extension operations on arrays which require constrained types. \nArrayExtensionsConstrained.average \naverage \nArrayExtensionsConstrained.averageBy \naverageBy \nArrayExtensionsConstrained.contains \ncontains \nArrayExtensionsConstrained.distinct \ndistinct \nArrayExtensionsConstrained.max \nmax \nArrayExtensionsConstrained.maxBy \nmaxBy \nArrayExtensionsConstrained.min \nmin \nArrayExtensionsConstrained.minBy \nminBy \nArrayExtensionsConstrained.sort \nsort \nArrayExtensionsConstrained.sortDescending \nsortDescending \nArrayExtensionsConstrained.sortInPlace \nsortInPlace \nArrayExtensionsConstrained.sum \nsum \nArrayExtensionsConstrained.sumBy \nsumBy \nArrayExtensionsConstrained.unzip \nunzip \nArrayExtensionsConstrained.unzip3 \nunzip3"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensionsconstrained.html#average","title":"ArrayExtensionsConstrained.average","content":"ArrayExtensionsConstrained.average \naverage \nReturns the average of the elements in the array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensionsconstrained.html#averageBy","title":"ArrayExtensionsConstrained.averageBy","content":"ArrayExtensionsConstrained.averageBy \naverageBy \nReturns the average of the elements generated by applying the function to each element of the array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensionsconstrained.html#contains","title":"ArrayExtensionsConstrained.contains","content":"ArrayExtensionsConstrained.contains \ncontains \nTests if the array contains the specified element."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensionsconstrained.html#distinct","title":"ArrayExtensionsConstrained.distinct","content":"ArrayExtensionsConstrained.distinct \ndistinct \nReturns an array that contains no duplicate entries according to generic hash and\n equality comparisons on the entries.\n If an element occurs multiple times in the array then the later occurrences are discarded."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensionsconstrained.html#max","title":"ArrayExtensionsConstrained.max","content":"ArrayExtensionsConstrained.max \nmax \nReturns the greatest of all elements of the array, compared via Operators.max on the function result. \nThrows ArgumentException for empty arrays."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensionsconstrained.html#maxBy","title":"ArrayExtensionsConstrained.maxBy","content":"ArrayExtensionsConstrained.maxBy \nmaxBy \nReturns the greatest of all elements of the array, compared via Operators.max on the function result. \nThrows ArgumentException for empty arrays."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensionsconstrained.html#min","title":"ArrayExtensionsConstrained.min","content":"ArrayExtensionsConstrained.min \nmin \nReturns the lowest of all elements of the array, compared via Operators.min. \nThrows ArgumentException for empty arrays"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensionsconstrained.html#minBy","title":"ArrayExtensionsConstrained.minBy","content":"ArrayExtensionsConstrained.minBy \nminBy \nReturns the lowest of all elements of the array, compared via Operators.min on the function result. \nThrows ArgumentException for empty arrays."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensionsconstrained.html#sort","title":"ArrayExtensionsConstrained.sort","content":"ArrayExtensionsConstrained.sort \nsort \nSorts the elements of an array, returning a new array. Elements are compared using Operators.compare.  \nThis is not a stable sort, i.e. the original order of equal elements is not necessarily preserved. \n For a stable sort, consider using Seq.sort."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensionsconstrained.html#sortDescending","title":"ArrayExtensionsConstrained.sortDescending","content":"ArrayExtensionsConstrained.sortDescending \nsortDescending \nSorts the elements of an array, in descending order, returning a new array. Elements are compared using Operators.compare.  \nThis is not a stable sort, i.e. the original order of equal elements is not necessarily preserved. \n For a stable sort, consider using Seq.sort."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensionsconstrained.html#sortInPlace","title":"ArrayExtensionsConstrained.sortInPlace","content":"ArrayExtensionsConstrained.sortInPlace \nsortInPlace \nSorts the elements of an array by mutating the array in-place, using the given comparison function. \n Elements are compared using Operators.compare."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensionsconstrained.html#sum","title":"ArrayExtensionsConstrained.sum","content":"ArrayExtensionsConstrained.sum \nsum \nReturns the sum of the elements in the array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensionsconstrained.html#sumBy","title":"ArrayExtensionsConstrained.sumBy","content":"ArrayExtensionsConstrained.sumBy \nsumBy \nReturns the sum of the results generated by applying the function to each element of the array."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensionsconstrained.html#unzip","title":"ArrayExtensionsConstrained.unzip","content":"ArrayExtensionsConstrained.unzip \nunzip \nSplits an array of pairs into two arrays."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-arrayextensionsconstrained.html#unzip3","title":"ArrayExtensionsConstrained.unzip3","content":"ArrayExtensionsConstrained.unzip3 \nunzip3 \nSplits an array of triples into three arrays."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensionsconstrained.html","title":"ListExtensionsConstrained","content":"ListExtensionsConstrained \nFluent extension operations on lists which require constrained types. \nListExtensionsConstrained.average \naverage \nListExtensionsConstrained.averageBy \naverageBy \nListExtensionsConstrained.distinct \ndistinct \nListExtensionsConstrained.max \nmax \nListExtensionsConstrained.maxBy \nmaxBy \nListExtensionsConstrained.min \nmin \nListExtensionsConstrained.minBy \nminBy \nListExtensionsConstrained.sort \nsort \nListExtensionsConstrained.sum \nsum \nListExtensionsConstrained.sumBy \nsumBy \nListExtensionsConstrained.unzip \nunzip \nListExtensionsConstrained.unzip3 \nunzip3"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensionsconstrained.html#average","title":"ListExtensionsConstrained.average","content":"ListExtensionsConstrained.average \naverage \nReturns the average of the elements in the list."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensionsconstrained.html#averageBy","title":"ListExtensionsConstrained.averageBy","content":"ListExtensionsConstrained.averageBy \naverageBy \nReturns the average of the elements generated by applying the function to each element of the list."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensionsconstrained.html#distinct","title":"ListExtensionsConstrained.distinct","content":"ListExtensionsConstrained.distinct \ndistinct \nReturns a list that contains no duplicate entries according to generic hash and\n equality comparisons on the entries.\n If an element occurs multiple times in the list then the later occurrences are discarded."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensionsconstrained.html#max","title":"ListExtensionsConstrained.max","content":"ListExtensionsConstrained.max \nmax \nReturns the greatest of all elements of the list, compared via Operators.max on the function result. \nThrows ArgumentException for empty arrays."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensionsconstrained.html#maxBy","title":"ListExtensionsConstrained.maxBy","content":"ListExtensionsConstrained.maxBy \nmaxBy \nReturns the greatest of all elements of the list, compared via Operators.max on the function result. \nThrows ArgumentException for empty arrays."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensionsconstrained.html#min","title":"ListExtensionsConstrained.min","content":"ListExtensionsConstrained.min \nmin \nReturns the lowest of all elements of the list, compared via Operators.min. \nThrows ArgumentException for empty arrays"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensionsconstrained.html#minBy","title":"ListExtensionsConstrained.minBy","content":"ListExtensionsConstrained.minBy \nminBy \nReturns the lowest of all elements of the list, compared via Operators.min on the function result. \nThrows ArgumentException for empty arrays."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensionsconstrained.html#sort","title":"ListExtensionsConstrained.sort","content":"ListExtensionsConstrained.sort \nsort \nSorts the elements of an list, returning a new list. Elements are compared using Operators.compare.  \nThis is not a stable sort, i.e. the original order of equal elements is not necessarily preserved. \n For a stable sort, consider using Seq.sort."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensionsconstrained.html#sum","title":"ListExtensionsConstrained.sum","content":"ListExtensionsConstrained.sum \nsum \nReturns the sum of the elements in the list."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensionsconstrained.html#sumBy","title":"ListExtensionsConstrained.sumBy","content":"ListExtensionsConstrained.sumBy \nsumBy \nReturns the sum of the results generated by applying the function to each element of the list."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensionsconstrained.html#unzip","title":"ListExtensionsConstrained.unzip","content":"ListExtensionsConstrained.unzip \nunzip \nSplits an list of pairs into two arrays."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-listextensionsconstrained.html#unzip3","title":"ListExtensionsConstrained.unzip3","content":"ListExtensionsConstrained.unzip3 \nunzip3 \nSplits an list of triples into three arrays."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-optionextensionsconstrained.html","title":"OptionExtensionsConstrained","content":"OptionExtensionsConstrained \nFluent extension operations on options which require constrained types. \nOptionExtensionsConstrained.toNullable \ntoNullable \nOptionExtensionsConstrained.toObj \ntoObj"},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-optionextensionsconstrained.html#toNullable","title":"OptionExtensionsConstrained.toNullable","content":"OptionExtensionsConstrained.toNullable \ntoNullable \nConvert the option to a Nullable value."},{"uri":"/FSharp.Core.Fluent/reference/fsharp-core-fluent-optionextensionsconstrained.html#toObj","title":"OptionExtensionsConstrained.toObj","content":"OptionExtensionsConstrained.toObj \ntoObj \nConvert an option to a potentially null value."},{"uri":"/FSharp.Core.Fluent/Fluent.html","title":"Usage examples for all functions\r\n","content":"(**\n\n# Usage examples for all functions\n\n\nThe fluent-style members for all Seq.* operations are shown below. Some additional fluent functions are\navailable for Array, these are not shown here.\n\n*)\nopen FSharp.Core.Fluent\n\nlet seq1 = seq { 1 .. 10 }\nlet seq2 = seq { 11 .. 20 }\n\nseq1.append(seq2)\nseq1.averageBy(fun x -> float x)\nseq1.cache()\nseq1.choose(fun x -> if x % 2 = 0 then Some x else None)\nseq1.collect (fun n -> [ n; n + 1 ])\nseq1.countBy(fun x -> x)\nseq1.distinct()\nseq1.distinctBy(fun x -> x)\nseq1.exactlyOne()\nseq1.exists(fun x -> x > 1)\nseq1.filter(fun x -> x > 1)\nseq1.find(fun x -> x > 1)\nseq1.findIndex(fun x -> x > 1)\nseq1.tryFind(fun x -> x > 1)\nseq1.tryFindIndex(fun x -> x > 1)\nseq1.tryPick(fun x -> Some x)\nseq1.fold(3, fun z x -> x + z)\nseq1.forall(fun x -> x > 1)\nseq1.groupBy(fun x -> x)\nseq1.head()\nseq1.iter(fun x -> printfn \"%d\" x)\nseq1.iteri(fun i x ->  printfn \"%d\" x)\nseq1.last()\nseq1.length\nseq1.map(fun x -> x + 1)\nseq1.mapi(fun i x -> x + 1)\nseq1.max()\nseq1.maxBy(fun x -> x)\nseq1.min()\nseq1.minBy(fun x -> x)\nseq1.pairwise()\nseq1.pick(fun x -> Some x)\nseq1.readonly()\nseq1.reduce(+)\nseq1.scan(3, fun z x -> x + z)\nseq1.skip(3)\nseq1.skipWhile(fun x -> x > 1)\nseq1.sort()\nseq1.sortBy(fun x -> x)\nseq1.sum()\nseq1.sumBy(fun x -> x)\nseq1.take(3)\nseq1.takeWhile(fun x -> x > 1)\nseq1.toArray()\nseq1.toList()\nseq1.toArray()\nseq1.truncate(3)\nseq1.tryFind(fun x -> x > 1)\nseq1.tryFindIndex(fun x -> x > 1)\nseq1.tryPick(fun x -> Some x)\nseq1.where(fun x -> x > 1)\nseq1.windowed(3)\nseq1.zip(seq2)\nseq1.zip3(seq1,seq2)\nseq1.contains(3)\nseq1.exceptseq2)\nseq1.permute(fun x -> x)\nseq1.reduceBack(+)\nseq1.foldBack((fun x z -> x + z), 3)\nseq1.reverse()\nseq1.scanBack((+),3)\nseq1.sortWith(compare)\nseq1.sortDescending()\nseq1.chunkBySize(3)\nseq1.splitInto(3)\nseq1.tryFindIndexBack(fun x -> x > 1)\nseq1.tryFindBack(fun x -> x > 1)\nseq1.tryItem(19)\nseq1.tail()"},{"uri":"/FSharp.Core.Fluent/index.html","title":"index","content":"(**\n\nFSharp.Core.Fluent is a collection of inlined methods allowing fluent access\nto all FSharp.Core functions for List, Array, Array2D, Array3D, Seq, Event and Observable.\n\n*)\n\n(**\n\n\nThis library adds ``.map``, ``.filter`` and many other methods for lists, arrays and sequences:\n\n*)\n\nopen FSharp.Core.Fluent\n\nlet xs = [ 1 .. 10 ]\n\nxs.map(fun x -> x + 1).filter(fun x -> x > 4).sort()\n\nxs.map(fun x -> x + 1)\n  .filter(fun x -> x > 4)\n  .sort()\n\n(**\n## Comparison with non-Fluent style\n\nF# code normally uses curried module functions to access functionality for collections,\ncomposed in pipelines:\n\n    xs\n    |> List.map (fun x -> x + 1)\n    |> List.filter (fun x -> x > 4)\n\nThere are reasons F# uses this style of programming by default:\nfor example, module functions can compose nicely (e.g. `xs |> List.map (List.map f)`  ).\nHowever \"fluent\" access can be convenient, especially in rapid investigative programming\nagainst existing data. For this reason, this option makes fluent notation an option.\n\nIn almost all case, `xs.OP(arg)` is equivalent to the pipelined `xs |> Coll.OP arg`. So\nyou can freely interconvert betweeen\n\n*)\n\nxs\n|> List.map (fun x -> x + 1)\n|> List.filter (fun x -> x > 4)\n\n(** and *)\n\nxs.map(fun x -> x + 1)\n  .filter(fun x -> x > 4)\n\n(**\n\nYou can also use pipeline operations after fluent operations:\n\n*)\nxs\n  .map(fun x -> x + 1)\n  |> List.filter(fun x -> x > 4)\n  |> Array.ofList\n\n(**\n\nHowever you can't shift from pipelining back to fluent, and attempting to do so can give obscure errors:\n\n```\nxs\n  |> List.map(fun x -> x + 1)\n  .filter(fun x -> x > 4)  // ERROR: The field or constructor \"filter\" is not defined\n```\n\nAs an aside, it is worth noting that in the the case of `xs.append(ys)`, the result is \"`xs` then `ys`\" - as expected.\nHowever this is different to the pitfall ``xs |> List.append ys``, which is actually `ys` then `xs` due to the way\npipelining and currying works.\n\n\n*)\n\n\n(**\n\n## Usage examples\n\nSee [this documentation](Fluent.html) for examples of using a wide range of the functions.\n\n\nContributing and copyright\n--------------------------\n\nThe project is hosted on [GitHub][gh] where you can [report issues][issues], fork\nthe project and submit pull requests.\n\nThe library is available under Apache 2.0 license, which allows modification and\nredistribution for both commercial and non-commercial purposes. For more information see the\n[License file][license] in the GitHub repository.\n\n  [content]: https://github.com/fsprojects/FSharp.Core.Fluent/tree/master/docs/content\n  [gh]: https://github.com/fsprojects/FSharp.Core.Fluent\n  [issues]: https://github.com/fsprojects/FSharp.Core.Fluent/issues\n  [readme]: https://github.com/fsprojects/FSharp.Core.Fluent/blob/master/README.md\n  [license]: https://github.com/fsprojects/FSharp.Core.Fluent/blob/master/LICENSE.txt\n\n *)\n"}]